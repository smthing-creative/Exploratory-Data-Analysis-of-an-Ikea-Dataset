{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "### Assignment 2.5 Exploratory Data Science Project\n",
        "Author: Jasmin Abbasi"
      ],
      "metadata": {
        "id": "njM3UCu3MVED"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Dataset Information\n",
        "###Origins\n",
        "The dataset I choose is a collection of ikea products, categories, and metadata. It was uploaded to Kaggle 2 years ago by user The Devastator. I choose this dataset instead of other Ikea datasets because it has been used by other people to perform data analytics, program bots or in some cases machine learning.\n",
        "\n",
        "Link to the dataset: https://www.kaggle.com/datasets/thedevastator/ikea-product/data\n",
        "\n",
        "###Purpose of the dataset\n",
        "This dataset was collected to study how consumer behavior correlates with short-term price changes. It has also been used to compare IKEA's prices with its competitors.\n",
        "\n",
        "###Limitations & Assumptions\n",
        "There are certain limitations with this dataset. Since it was collected 2 years ago I know there are limitations in terms of relevance of current products and prices. During the last 2 years serveral instances of inflation and other economic activities make the prices not representative today. This is a limitation that I am aware of, but for the purpose of this assignment is not relevant since I can still perform data analytics on the dataset regardless.\n",
        "\n",
        "Other assumptions to take into consideration: The person who collected this data decided to collect only the following categories: name, category, price, old price, sellable online (if it is sold online), link, other color, designer, depth, and height. This can cause some limitations when looking at correlations because there could be products with no values for depth or height.\n",
        "\n",
        "###Personal Motivations\n",
        "I chose this dataset because it was my backup option if scraping the website for my client project did not work. I tried data scraping for the previous assignment as well and was not able to do it because of error codes that were triggered from the Formula 1 website. While browsing kaggle, I found this dataset and read the subsequent notebook the author wrote for this dataset https://www.kaggle.com/code/takkimsncn/ikea-products-analysis/ that showed the different types of way visualization could be used on this dataset. This made me curious in terms of what types of data analysis I could conduct on the data.\n",
        "\n"
      ],
      "metadata": {
        "id": "uLVr3LzxMeXJ"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 83,
      "metadata": {
        "id": "UCtdShZqLTJq"
      },
      "outputs": [],
      "source": [
        "#import relevant Python libraries\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I want to see if there are in fact products without values for the dimension categories: depth, height, and width."
      ],
      "metadata": {
        "id": "CoNGbU1fSlb4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv('ikea.csv')\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "kwfM1MIcLzr6",
        "outputId": "3079a37f-7bea-456a-f09d-bc1cc8d74f07"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0   item_id                   name       category   price  \\\n",
              "0           0  90420332               FREKVENS  Bar furniture   265.0   \n",
              "1           1    368814              NORDVIKEN  Bar furniture   995.0   \n",
              "2           2   9333523  NORDVIKEN / NORDVIKEN  Bar furniture  2095.0   \n",
              "3           3  80155205                   STIG  Bar furniture    69.0   \n",
              "4           4  30180504                NORBERG  Bar furniture   225.0   \n",
              "\n",
              "      old_price  sellable_online  \\\n",
              "0  No old price             True   \n",
              "1  No old price            False   \n",
              "2  No old price            False   \n",
              "3  No old price             True   \n",
              "4  No old price             True   \n",
              "\n",
              "                                                link other_colors  \\\n",
              "0  https://www.ikea.com/sa/en/p/frekvens-bar-tabl...           No   \n",
              "1  https://www.ikea.com/sa/en/p/nordviken-bar-tab...           No   \n",
              "2  https://www.ikea.com/sa/en/p/nordviken-nordvik...           No   \n",
              "3  https://www.ikea.com/sa/en/p/stig-bar-stool-wi...          Yes   \n",
              "4  https://www.ikea.com/sa/en/p/norberg-wall-moun...           No   \n",
              "\n",
              "                                   short_description              designer  \\\n",
              "0           Bar table, in/outdoor,          51x51 cm  Nicholai Wiig Hansen   \n",
              "1                      Bar table,          140x80 cm     Francis Cayouette   \n",
              "2                         Bar table and 4 bar stools     Francis Cayouette   \n",
              "3            Bar stool with backrest,          74 cm         Henrik Preutz   \n",
              "4          Wall-mounted drop-leaf table,         ...        Marcus Arvonen   \n",
              "\n",
              "   depth  height  width  \n",
              "0    NaN    99.0   51.0  \n",
              "1    NaN   105.0   80.0  \n",
              "2    NaN     NaN    NaN  \n",
              "3   50.0   100.0   60.0  \n",
              "4   60.0    43.0   74.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-37e4cd63-e7b7-4126-a1fc-d8defa98535c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>item_id</th>\n",
              "      <th>name</th>\n",
              "      <th>category</th>\n",
              "      <th>price</th>\n",
              "      <th>old_price</th>\n",
              "      <th>sellable_online</th>\n",
              "      <th>link</th>\n",
              "      <th>other_colors</th>\n",
              "      <th>short_description</th>\n",
              "      <th>designer</th>\n",
              "      <th>depth</th>\n",
              "      <th>height</th>\n",
              "      <th>width</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>90420332</td>\n",
              "      <td>FREKVENS</td>\n",
              "      <td>Bar furniture</td>\n",
              "      <td>265.0</td>\n",
              "      <td>No old price</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/frekvens-bar-tabl...</td>\n",
              "      <td>No</td>\n",
              "      <td>Bar table, in/outdoor,          51x51 cm</td>\n",
              "      <td>Nicholai Wiig Hansen</td>\n",
              "      <td>NaN</td>\n",
              "      <td>99.0</td>\n",
              "      <td>51.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>368814</td>\n",
              "      <td>NORDVIKEN</td>\n",
              "      <td>Bar furniture</td>\n",
              "      <td>995.0</td>\n",
              "      <td>No old price</td>\n",
              "      <td>False</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/nordviken-bar-tab...</td>\n",
              "      <td>No</td>\n",
              "      <td>Bar table,          140x80 cm</td>\n",
              "      <td>Francis Cayouette</td>\n",
              "      <td>NaN</td>\n",
              "      <td>105.0</td>\n",
              "      <td>80.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>9333523</td>\n",
              "      <td>NORDVIKEN / NORDVIKEN</td>\n",
              "      <td>Bar furniture</td>\n",
              "      <td>2095.0</td>\n",
              "      <td>No old price</td>\n",
              "      <td>False</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/nordviken-nordvik...</td>\n",
              "      <td>No</td>\n",
              "      <td>Bar table and 4 bar stools</td>\n",
              "      <td>Francis Cayouette</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>80155205</td>\n",
              "      <td>STIG</td>\n",
              "      <td>Bar furniture</td>\n",
              "      <td>69.0</td>\n",
              "      <td>No old price</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/stig-bar-stool-wi...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Bar stool with backrest,          74 cm</td>\n",
              "      <td>Henrik Preutz</td>\n",
              "      <td>50.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>60.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>30180504</td>\n",
              "      <td>NORBERG</td>\n",
              "      <td>Bar furniture</td>\n",
              "      <td>225.0</td>\n",
              "      <td>No old price</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/norberg-wall-moun...</td>\n",
              "      <td>No</td>\n",
              "      <td>Wall-mounted drop-leaf table,         ...</td>\n",
              "      <td>Marcus Arvonen</td>\n",
              "      <td>60.0</td>\n",
              "      <td>43.0</td>\n",
              "      <td>74.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-37e4cd63-e7b7-4126-a1fc-d8defa98535c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-37e4cd63-e7b7-4126-a1fc-d8defa98535c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-37e4cd63-e7b7-4126-a1fc-d8defa98535c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f92cc3a0-0adb-42e2-91a5-1da031298cba\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f92cc3a0-0adb-42e2-91a5-1da031298cba')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f92cc3a0-0adb-42e2-91a5-1da031298cba button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 3694,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1066,\n        \"min\": 0,\n        \"max\": 3693,\n        \"num_unique_values\": 3694,\n        \"samples\": [\n          393,\n          3561,\n          551\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"item_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28887094,\n        \"min\": 58487,\n        \"max\": 99932615,\n        \"num_unique_values\": 2962,\n        \"samples\": [\n          50401986,\n          60196358,\n          69291407\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 607,\n        \"samples\": [\n          \"HILVER / GERTON\",\n          \"MELLTORP / MARIUS\",\n          \"LYCKSELE MURBO\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 17,\n        \"samples\": [\n          \"Bar furniture\",\n          \"Beds\",\n          \"Chairs\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1374.6524941516216,\n        \"min\": 3.0,\n        \"max\": 9585.0,\n        \"num_unique_values\": 979,\n        \"samples\": [\n          585.0,\n          1975.0,\n          137.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"old_price\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 365,\n        \"samples\": [\n          \"SR 1,975\",\n          \"SR 2,100\",\n          \"SR 800\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sellable_online\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"link\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2962,\n        \"samples\": [\n          \"https://www.ikea.com/sa/en/p/sjaelland-bench-outdoor-light-grey-light-brown-50401986/\",\n          \"https://www.ikea.com/sa/en/p/sundvik-childrens-chair-white-60196358/\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"other_colors\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"short_description\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1706,\n        \"samples\": [\n          \"        TV bench,          180x42x48 cm\",\n          \"        Corner workstation,          100x142 cm\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"designer\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 381,\n        \"samples\": [\n          \"504.224.94 You can position the shelf and clothes rail in two different ways \\u2013 clothes rail at the top and shelf down below, or both together at the top of the wardrobe.Deep enough to hold standard-sized adult hangers.With the included colourful stickers, you can quickly label the doors in your own personal way.You can also write with chalk on the sticker to keep track of where you have your things.WARNING! TIPPING HAZARD \\u2013 Unanchored furniture can tip over. This furniture shall be anchored to the wall with the enclosed safety fitting to prevent it from tipping over.Different wall materials require different types of fixing devices. Use fixing devices suitable for the walls in your home, sold separately.\",\n          \"Nike Karlsson/Mikael Axelsson\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"depth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29.958350722592545,\n        \"min\": 1.0,\n        \"max\": 257.0,\n        \"num_unique_values\": 114,\n        \"samples\": [\n          62.0,\n          47.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 61.097585209617456,\n        \"min\": 1.0,\n        \"max\": 700.0,\n        \"num_unique_values\": 193,\n        \"samples\": [\n          179.0,\n          61.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 71.13377120612006,\n        \"min\": 1.0,\n        \"max\": 420.0,\n        \"num_unique_values\": 263,\n        \"samples\": [\n          270.0,\n          21.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Structure of the dataset\n",
        "The dataset contains 14 columns with 3694 rows each:\n",
        "\n",
        "\n",
        "1. Unnamed\n",
        "2. Item_id: unique key column per product\n",
        "3. Name: name of the IKEA product per their catalogue\n",
        "4. Category: category of the IKEA product\n",
        "5. Price: current price 2 years ago\n",
        "6. Old Price: old price of same product\n",
        "7. Sellable Online: if the product is sold online\n",
        "8. Link: link to the product location on the IKEA website\n",
        "9. Other Colors: any other colors that the product is available in than the default\n",
        "10. Short Description: description of the product\n",
        "11. Designer: who collaborated with IKEA to design the product\n",
        "12. Depth: depth dimension of the product\n",
        "13. Height: height dimension of the product\n",
        "14. Width: width dimention of the product\n",
        "\n",
        "Considerations:\n",
        "It is not clear what the purpose of the first column is. It could have been an index, but a key, so I will probably drop it to avoid any confusion. Additionally, there is no information on where the old price comes from.\n",
        "\n",
        "It is also clear from the first 5 rows that there are some missing values, I assume that these are values missing from products that don't have traditional dimension. To verify this I will use the info function."
      ],
      "metadata": {
        "id": "Lh_SvYMgX-nz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RVqYQ749S8Ux",
        "outputId": "59a4d2bd-4d3e-4181-aeae-251535d71098"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 3694 entries, 0 to 3693\n",
            "Data columns (total 14 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   Unnamed: 0         3694 non-null   int64  \n",
            " 1   item_id            3694 non-null   int64  \n",
            " 2   name               3694 non-null   object \n",
            " 3   category           3694 non-null   object \n",
            " 4   price              3694 non-null   float64\n",
            " 5   old_price          3694 non-null   object \n",
            " 6   sellable_online    3694 non-null   bool   \n",
            " 7   link               3694 non-null   object \n",
            " 8   other_colors       3694 non-null   object \n",
            " 9   short_description  3694 non-null   object \n",
            " 10  designer           3694 non-null   object \n",
            " 11  depth              2231 non-null   float64\n",
            " 12  height             2706 non-null   float64\n",
            " 13  width              3105 non-null   float64\n",
            "dtypes: bool(1), float64(4), int64(2), object(7)\n",
            "memory usage: 378.9+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "It seems that only the dimension columns have missing values. I will make the assumption that these are products without traditional dimensions, which we can verify later. In total 40% of values are missing a depth values, 27% are missing height values, and 16% are missing width values. I will not be cleaning these rows from the dataset because I think there are enough visualizations and analysis that can be done without including these values. I could also drop those columns, however, I think this is an unnecessary step that won't add value.\n",
        "\n",
        "Other details:\n",
        "string data types are being saved as objects. This is a default datatype in pandas. I want to make sure that any further operations behave predictably, so I will be converting these data type from object to string where I am sure the data containts only string.\n",
        "\n",
        "From calling head on the dataframe earlier I can see that: Name, Category, other_colors, and designer are all strings. These will be the columns I convert to string dtype. Upon further inspection, the price column should be a integer rather than a float."
      ],
      "metadata": {
        "id": "qcMDLx-oTAmD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['name'] = df['name'].astype('string')\n",
        "df['category'] = df['category'].astype('string')\n",
        "df['other_colors'] = df['other_colors'].astype('string')\n",
        "df['designer'] = df['designer'].astype('string')\n",
        "df['price'] = df['price'].astype('int')\n",
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "29bo6xQBfH0C",
        "outputId": "76782824-12bf-4438-e637-5e03228c815c"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 3694 entries, 0 to 3693\n",
            "Data columns (total 14 columns):\n",
            " #   Column             Non-Null Count  Dtype  \n",
            "---  ------             --------------  -----  \n",
            " 0   Unnamed: 0         3694 non-null   int64  \n",
            " 1   item_id            3694 non-null   int64  \n",
            " 2   name               3694 non-null   string \n",
            " 3   category           3694 non-null   string \n",
            " 4   price              3694 non-null   int64  \n",
            " 5   old_price          3694 non-null   object \n",
            " 6   sellable_online    3694 non-null   bool   \n",
            " 7   link               3694 non-null   object \n",
            " 8   other_colors       3694 non-null   string \n",
            " 9   short_description  3694 non-null   object \n",
            " 10  designer           3694 non-null   string \n",
            " 11  depth              2231 non-null   float64\n",
            " 12  height             2706 non-null   float64\n",
            " 13  width              3105 non-null   float64\n",
            "dtypes: bool(1), float64(3), int64(3), object(3), string(4)\n",
            "memory usage: 378.9+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "The old_price column is an object and not a float like the price column because in some rows, such as the one below, the values are string. For the purpose of my analysis, I will drop the column to avoid confusion further on. Before I drop the column I want to also check if there are any duplicate values."
      ],
      "metadata": {
        "id": "lYQx4TI_fbyM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.duplicated().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YsDOl1wyxZGF",
        "outputId": "684454fa-5d2f-4bd4-99aa-9e81f0ff3095"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Since there are no duplicates, I will go ahead an drop the columns mentioned above."
      ],
      "metadata": {
        "id": "2TnAFZjWxbmd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned= df.drop(columns=['old_price', 'Unnamed: 0'])\n",
        "df_cleaned"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "CVwM2-AOf1T4",
        "outputId": "b5c3e018-63df-470c-e772-097365a21ccb"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       item_id                   name       category  price  sellable_online  \\\n",
              "0     90420332               FREKVENS  Bar furniture    265             True   \n",
              "1       368814              NORDVIKEN  Bar furniture    995            False   \n",
              "2      9333523  NORDVIKEN / NORDVIKEN  Bar furniture   2095            False   \n",
              "3     80155205                   STIG  Bar furniture     69             True   \n",
              "4     30180504                NORBERG  Bar furniture    225             True   \n",
              "...        ...                    ...            ...    ...              ...   \n",
              "3689  99157902                ELVARLI      Wardrobes    750             True   \n",
              "3690   9158152                ELVARLI      Wardrobes   1572             True   \n",
              "3691  59157541                ELVARLI      Wardrobes    924             True   \n",
              "3692  89157573                ELVARLI      Wardrobes   2745             True   \n",
              "3693  69157376                ELVARLI      Wardrobes   1231             True   \n",
              "\n",
              "                                                   link other_colors  \\\n",
              "0     https://www.ikea.com/sa/en/p/frekvens-bar-tabl...           No   \n",
              "1     https://www.ikea.com/sa/en/p/nordviken-bar-tab...           No   \n",
              "2     https://www.ikea.com/sa/en/p/nordviken-nordvik...           No   \n",
              "3     https://www.ikea.com/sa/en/p/stig-bar-stool-wi...          Yes   \n",
              "4     https://www.ikea.com/sa/en/p/norberg-wall-moun...           No   \n",
              "...                                                 ...          ...   \n",
              "3689  https://www.ikea.com/sa/en/p/elvarli-1-section...           No   \n",
              "3690  https://www.ikea.com/sa/en/p/elvarli-2-section...           No   \n",
              "3691  https://www.ikea.com/sa/en/p/elvarli-2-section...           No   \n",
              "3692  https://www.ikea.com/sa/en/p/elvarli-3-section...           No   \n",
              "3693  https://www.ikea.com/sa/en/p/elvarli-2-section...           No   \n",
              "\n",
              "                                      short_description              designer  \\\n",
              "0              Bar table, in/outdoor,          51x51 cm  Nicholai Wiig Hansen   \n",
              "1                         Bar table,          140x80 cm     Francis Cayouette   \n",
              "2                            Bar table and 4 bar stools     Francis Cayouette   \n",
              "3               Bar stool with backrest,          74 cm         Henrik Preutz   \n",
              "4             Wall-mounted drop-leaf table,         ...        Marcus Arvonen   \n",
              "...                                                 ...                   ...   \n",
              "3689               1 section,          92x51x222-350 cm       Ehlén Johansson   \n",
              "3690             2 sections,          135x51x222-350 cm       Ehlén Johansson   \n",
              "3691             2 sections,          175x51x222-350 cm       Ehlén Johansson   \n",
              "3692             3 sections,          178x51x222-350 cm       Ehlén Johansson   \n",
              "3693             2 sections,          175x51x222-350 cm       Ehlén Johansson   \n",
              "\n",
              "      depth  height  width  \n",
              "0       NaN    99.0   51.0  \n",
              "1       NaN   105.0   80.0  \n",
              "2       NaN     NaN    NaN  \n",
              "3      50.0   100.0   60.0  \n",
              "4      60.0    43.0   74.0  \n",
              "...     ...     ...    ...  \n",
              "3689   50.0     NaN   91.0  \n",
              "3690   50.0     NaN  135.0  \n",
              "3691   50.0     NaN  175.0  \n",
              "3692   50.0     NaN  178.0  \n",
              "3693   50.0     NaN  175.0  \n",
              "\n",
              "[3694 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3187549c-8aa2-49c3-bbf9-0416e4813e3a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>item_id</th>\n",
              "      <th>name</th>\n",
              "      <th>category</th>\n",
              "      <th>price</th>\n",
              "      <th>sellable_online</th>\n",
              "      <th>link</th>\n",
              "      <th>other_colors</th>\n",
              "      <th>short_description</th>\n",
              "      <th>designer</th>\n",
              "      <th>depth</th>\n",
              "      <th>height</th>\n",
              "      <th>width</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>90420332</td>\n",
              "      <td>FREKVENS</td>\n",
              "      <td>Bar furniture</td>\n",
              "      <td>265</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/frekvens-bar-tabl...</td>\n",
              "      <td>No</td>\n",
              "      <td>Bar table, in/outdoor,          51x51 cm</td>\n",
              "      <td>Nicholai Wiig Hansen</td>\n",
              "      <td>NaN</td>\n",
              "      <td>99.0</td>\n",
              "      <td>51.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>368814</td>\n",
              "      <td>NORDVIKEN</td>\n",
              "      <td>Bar furniture</td>\n",
              "      <td>995</td>\n",
              "      <td>False</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/nordviken-bar-tab...</td>\n",
              "      <td>No</td>\n",
              "      <td>Bar table,          140x80 cm</td>\n",
              "      <td>Francis Cayouette</td>\n",
              "      <td>NaN</td>\n",
              "      <td>105.0</td>\n",
              "      <td>80.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>9333523</td>\n",
              "      <td>NORDVIKEN / NORDVIKEN</td>\n",
              "      <td>Bar furniture</td>\n",
              "      <td>2095</td>\n",
              "      <td>False</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/nordviken-nordvik...</td>\n",
              "      <td>No</td>\n",
              "      <td>Bar table and 4 bar stools</td>\n",
              "      <td>Francis Cayouette</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>80155205</td>\n",
              "      <td>STIG</td>\n",
              "      <td>Bar furniture</td>\n",
              "      <td>69</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/stig-bar-stool-wi...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Bar stool with backrest,          74 cm</td>\n",
              "      <td>Henrik Preutz</td>\n",
              "      <td>50.0</td>\n",
              "      <td>100.0</td>\n",
              "      <td>60.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>30180504</td>\n",
              "      <td>NORBERG</td>\n",
              "      <td>Bar furniture</td>\n",
              "      <td>225</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/norberg-wall-moun...</td>\n",
              "      <td>No</td>\n",
              "      <td>Wall-mounted drop-leaf table,         ...</td>\n",
              "      <td>Marcus Arvonen</td>\n",
              "      <td>60.0</td>\n",
              "      <td>43.0</td>\n",
              "      <td>74.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3689</th>\n",
              "      <td>99157902</td>\n",
              "      <td>ELVARLI</td>\n",
              "      <td>Wardrobes</td>\n",
              "      <td>750</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/elvarli-1-section...</td>\n",
              "      <td>No</td>\n",
              "      <td>1 section,          92x51x222-350 cm</td>\n",
              "      <td>Ehlén Johansson</td>\n",
              "      <td>50.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>91.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3690</th>\n",
              "      <td>9158152</td>\n",
              "      <td>ELVARLI</td>\n",
              "      <td>Wardrobes</td>\n",
              "      <td>1572</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/elvarli-2-section...</td>\n",
              "      <td>No</td>\n",
              "      <td>2 sections,          135x51x222-350 cm</td>\n",
              "      <td>Ehlén Johansson</td>\n",
              "      <td>50.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>135.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3691</th>\n",
              "      <td>59157541</td>\n",
              "      <td>ELVARLI</td>\n",
              "      <td>Wardrobes</td>\n",
              "      <td>924</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/elvarli-2-section...</td>\n",
              "      <td>No</td>\n",
              "      <td>2 sections,          175x51x222-350 cm</td>\n",
              "      <td>Ehlén Johansson</td>\n",
              "      <td>50.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>175.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3692</th>\n",
              "      <td>89157573</td>\n",
              "      <td>ELVARLI</td>\n",
              "      <td>Wardrobes</td>\n",
              "      <td>2745</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/elvarli-3-section...</td>\n",
              "      <td>No</td>\n",
              "      <td>3 sections,          178x51x222-350 cm</td>\n",
              "      <td>Ehlén Johansson</td>\n",
              "      <td>50.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>178.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3693</th>\n",
              "      <td>69157376</td>\n",
              "      <td>ELVARLI</td>\n",
              "      <td>Wardrobes</td>\n",
              "      <td>1231</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/elvarli-2-section...</td>\n",
              "      <td>No</td>\n",
              "      <td>2 sections,          175x51x222-350 cm</td>\n",
              "      <td>Ehlén Johansson</td>\n",
              "      <td>50.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>175.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>3694 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3187549c-8aa2-49c3-bbf9-0416e4813e3a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3187549c-8aa2-49c3-bbf9-0416e4813e3a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3187549c-8aa2-49c3-bbf9-0416e4813e3a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-11708edd-380c-447d-aed1-f8c3b4435d90\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-11708edd-380c-447d-aed1-f8c3b4435d90')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-11708edd-380c-447d-aed1-f8c3b4435d90 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_05ea4de6-e926-4a4e-bf2c-3c3af3fe06ca\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_cleaned')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_05ea4de6-e926-4a4e-bf2c-3c3af3fe06ca button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_cleaned');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_cleaned",
              "summary": "{\n  \"name\": \"df_cleaned\",\n  \"rows\": 3694,\n  \"fields\": [\n    {\n      \"column\": \"item_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28887094,\n        \"min\": 58487,\n        \"max\": 99932615,\n        \"num_unique_values\": 2962,\n        \"samples\": [\n          50401986,\n          60196358,\n          69291407\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 607,\n        \"samples\": [\n          \"HILVER / GERTON\",\n          \"MELLTORP / MARIUS\",\n          \"LYCKSELE MURBO\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"category\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 17,\n        \"samples\": [\n          \"Bar furniture\",\n          \"Beds\",\n          \"Chairs\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1374,\n        \"min\": 3,\n        \"max\": 9585,\n        \"num_unique_values\": 964,\n        \"samples\": [\n          4100,\n          2190,\n          1181\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sellable_online\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"link\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2962,\n        \"samples\": [\n          \"https://www.ikea.com/sa/en/p/sjaelland-bench-outdoor-light-grey-light-brown-50401986/\",\n          \"https://www.ikea.com/sa/en/p/sundvik-childrens-chair-white-60196358/\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"other_colors\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\",\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"short_description\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1706,\n        \"samples\": [\n          \"        TV bench,          180x42x48 cm\",\n          \"        Corner workstation,          100x142 cm\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"designer\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 381,\n        \"samples\": [\n          \"504.224.94 You can position the shelf and clothes rail in two different ways \\u2013 clothes rail at the top and shelf down below, or both together at the top of the wardrobe.Deep enough to hold standard-sized adult hangers.With the included colourful stickers, you can quickly label the doors in your own personal way.You can also write with chalk on the sticker to keep track of where you have your things.WARNING! TIPPING HAZARD \\u2013 Unanchored furniture can tip over. This furniture shall be anchored to the wall with the enclosed safety fitting to prevent it from tipping over.Different wall materials require different types of fixing devices. Use fixing devices suitable for the walls in your home, sold separately.\",\n          \"Nike Karlsson/Mikael Axelsson\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"depth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29.958350722592545,\n        \"min\": 1.0,\n        \"max\": 257.0,\n        \"num_unique_values\": 114,\n        \"samples\": [\n          62.0,\n          47.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 61.097585209617456,\n        \"min\": 1.0,\n        \"max\": 700.0,\n        \"num_unique_values\": 193,\n        \"samples\": [\n          179.0,\n          61.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 71.13377120612006,\n        \"min\": 1.0,\n        \"max\": 420.0,\n        \"num_unique_values\": 263,\n        \"samples\": [\n          270.0,\n          21.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sample_missing = df[df['item_id'] == 9333523]\n",
        "sample_missing"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 89
        },
        "id": "2u8QW3QmaBY7",
        "outputId": "d736010d-7689-4fa0-e16d-0f6992d56c3d"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Unnamed: 0  item_id                   name       category  price  \\\n",
              "2           2  9333523  NORDVIKEN / NORDVIKEN  Bar furniture   2095   \n",
              "\n",
              "      old_price  sellable_online  \\\n",
              "2  No old price            False   \n",
              "\n",
              "                                                link other_colors  \\\n",
              "2  https://www.ikea.com/sa/en/p/nordviken-nordvik...           No   \n",
              "\n",
              "                    short_description           designer  depth  height  width  \n",
              "2          Bar table and 4 bar stools  Francis Cayouette    NaN     NaN    NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-74c04d00-1726-45d0-81c0-b5fce118528f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>item_id</th>\n",
              "      <th>name</th>\n",
              "      <th>category</th>\n",
              "      <th>price</th>\n",
              "      <th>old_price</th>\n",
              "      <th>sellable_online</th>\n",
              "      <th>link</th>\n",
              "      <th>other_colors</th>\n",
              "      <th>short_description</th>\n",
              "      <th>designer</th>\n",
              "      <th>depth</th>\n",
              "      <th>height</th>\n",
              "      <th>width</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>9333523</td>\n",
              "      <td>NORDVIKEN / NORDVIKEN</td>\n",
              "      <td>Bar furniture</td>\n",
              "      <td>2095</td>\n",
              "      <td>No old price</td>\n",
              "      <td>False</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/nordviken-nordvik...</td>\n",
              "      <td>No</td>\n",
              "      <td>Bar table and 4 bar stools</td>\n",
              "      <td>Francis Cayouette</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-74c04d00-1726-45d0-81c0-b5fce118528f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-74c04d00-1726-45d0-81c0-b5fce118528f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-74c04d00-1726-45d0-81c0-b5fce118528f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "  <div id=\"id_f883cb19-7b0e-4be9-a614-14052a311910\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('sample_missing')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f883cb19-7b0e-4be9-a614-14052a311910 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('sample_missing');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "sample_missing",
              "summary": "{\n  \"name\": \"sample_missing\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"Unnamed: 0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2,\n        \"max\": 2,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"item_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 9333523,\n        \"max\": 9333523,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          9333523\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"NORDVIKEN / NORDVIKEN\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"category\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Bar furniture\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 2095,\n        \"max\": 2095,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2095\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"old_price\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"No old price\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sellable_online\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"link\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"https://www.ikea.com/sa/en/p/nordviken-nordviken-bar-table-and-4-bar-stools-black-black-s09333523/\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"other_colors\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"short_description\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"        Bar table and 4 bar stools\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"designer\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Francis Cayouette\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"depth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Above I have selected one row from the first 5 that I saw had missing values. This product has missing values in the dimension columns because it is a set of bar stools and a table. This means that the set cannot have traditional dimensions like if you were measuring only one piece of the set. This confirms my assumption about the missing values and I will not be removing them.\n",
        "\n",
        "I am also curious about the cateogories in the other_colors column."
      ],
      "metadata": {
        "id": "6VM80zNaaYpd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "other_colors_categories = df_cleaned.groupby('other_colors').size()\n",
        "print(other_colors_categories)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j4DZklRtbawz",
        "outputId": "8fad09bd-e075-4bbf-e7f9-8bf7f5a6d0bc"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "other_colors\n",
            "No     2182\n",
            "Yes    1512\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now it is clear that there are only two categories in this column. From this information we can see what is the division between categories with and without other color options."
      ],
      "metadata": {
        "id": "BMMIYmI-btK7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.pie(other_colors_categories, labels=other_colors_categories.index, autopct='%1.1f%%')\n",
        "plt.title('Distribution of IKEA product categories that offer other colors')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "OTXynfEMrbHo",
        "outputId": "5ed78fb1-5f71-4024-90bc-027cede8112f"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "After understanding the data structure and columns, I will move on to analysis the values in the dataset itself."
      ],
      "metadata": {
        "id": "2o6G_5N8tf5J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "BQ3TDZ5fMKso",
        "outputId": "1db123fd-126b-42c1-89a1-ad77c76096b2"
      },
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            item_id        price        depth       height        width\n",
              "count  3.694000e+03  3694.000000  2231.000000  2706.000000  3105.000000\n",
              "mean   4.863240e+07  1078.201678    54.379202   101.679970   104.470853\n",
              "std    2.888709e+07  1374.654043    29.958351    61.097585    71.133771\n",
              "min    5.848700e+04     3.000000     1.000000     1.000000     1.000000\n",
              "25%    2.039057e+07   180.750000    38.000000    67.000000    60.000000\n",
              "50%    4.928808e+07   544.500000    47.000000    83.000000    80.000000\n",
              "75%    7.040357e+07  1429.500000    60.000000   124.000000   140.000000\n",
              "max    9.993262e+07  9585.000000   257.000000   700.000000   420.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cd2f27e5-7e84-4dd9-882f-a8c127e6d4cd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>item_id</th>\n",
              "      <th>price</th>\n",
              "      <th>depth</th>\n",
              "      <th>height</th>\n",
              "      <th>width</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>3.694000e+03</td>\n",
              "      <td>3694.000000</td>\n",
              "      <td>2231.000000</td>\n",
              "      <td>2706.000000</td>\n",
              "      <td>3105.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>4.863240e+07</td>\n",
              "      <td>1078.201678</td>\n",
              "      <td>54.379202</td>\n",
              "      <td>101.679970</td>\n",
              "      <td>104.470853</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2.888709e+07</td>\n",
              "      <td>1374.654043</td>\n",
              "      <td>29.958351</td>\n",
              "      <td>61.097585</td>\n",
              "      <td>71.133771</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>5.848700e+04</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2.039057e+07</td>\n",
              "      <td>180.750000</td>\n",
              "      <td>38.000000</td>\n",
              "      <td>67.000000</td>\n",
              "      <td>60.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>4.928808e+07</td>\n",
              "      <td>544.500000</td>\n",
              "      <td>47.000000</td>\n",
              "      <td>83.000000</td>\n",
              "      <td>80.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>7.040357e+07</td>\n",
              "      <td>1429.500000</td>\n",
              "      <td>60.000000</td>\n",
              "      <td>124.000000</td>\n",
              "      <td>140.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>9.993262e+07</td>\n",
              "      <td>9585.000000</td>\n",
              "      <td>257.000000</td>\n",
              "      <td>700.000000</td>\n",
              "      <td>420.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cd2f27e5-7e84-4dd9-882f-a8c127e6d4cd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-cd2f27e5-7e84-4dd9-882f-a8c127e6d4cd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-cd2f27e5-7e84-4dd9-882f-a8c127e6d4cd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-df87d262-caa7-4765-af3b-7e707d3e98d8\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-df87d262-caa7-4765-af3b-7e707d3e98d8')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-df87d262-caa7-4765-af3b-7e707d3e98d8 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_cleaned\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"item_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34598545.323295794,\n        \"min\": 3694.0,\n        \"max\": 99932615.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          48632396.78992961,\n          49288078.0,\n          3694.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3183.392946249092,\n        \"min\": 3.0,\n        \"max\": 9585.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1078.201678397401,\n          544.5,\n          3694.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"depth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 768.1934948755667,\n        \"min\": 1.0,\n        \"max\": 2231.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          54.379202151501566,\n          47.0,\n          2231.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 926.3163987494953,\n        \"min\": 1.0,\n        \"max\": 2706.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          101.679970436068,\n          83.0,\n          2706.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1061.087935579842,\n        \"min\": 1.0,\n        \"max\": 3105.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          104.4708534621578,\n          80.0,\n          3105.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "I will not be considering the item id statistical calculation because this is a key and should not be taken as a typical numerical value. From this dataset, I could possibly look at the statistical calculations for the price column.\n",
        "\n",
        "If we entertain this we can see that:\n",
        "*   minimum value: 3\n",
        "*   mean: 1078\n",
        "*   maximum value:9585\n",
        "\n",
        "We can further illustrate this with a box plot\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "SDGx6BMQkuwq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "plt.figure(figsize=(3,6))\n",
        "sns.boxplot(df_cleaned['price'])\n",
        "plt.title('Ikea Product Prices 2022')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 526
        },
        "id": "I0aiXc2BWF7N",
        "outputId": "a75ad198-18e3-456a-a2d9-a66c181ce0ce"
      },
      "execution_count": 74,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 300x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "From the box plot it is clear that there are many outlier above the maximum value. This can be seen from the amount of dots above the box plot. We can sort the df from highest to lowest price to see if these values make sense."
      ],
      "metadata": {
        "id": "LdhJpiONm3qJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_cleaned.sort_values(by='price', ascending=False, inplace=True)\n",
        "df_cleaned.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "uJOIKmginXjx",
        "outputId": "2368b5e0-af39-4edf-dd5b-5a970d92b84a"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       item_id        name           category  price  sellable_online  \\\n",
              "2344  79277632     LIDHULT  Sofas & armchairs   9585             True   \n",
              "190   29277639     LIDHULT               Beds   9585             True   \n",
              "2559  89256610     GRÖNLID  Sofas & armchairs   8900             True   \n",
              "118   89186778  KONGSFJORD               Beds   8551             True   \n",
              "2455  49269153  LANDSKRONA  Sofas & armchairs   8495             True   \n",
              "\n",
              "                                                   link other_colors  \\\n",
              "2344  https://www.ikea.com/sa/en/p/lidhult-corner-so...          Yes   \n",
              "190   https://www.ikea.com/sa/en/p/lidhult-corner-so...          Yes   \n",
              "2559  https://www.ikea.com/sa/en/p/groenlid-u-shaped...           No   \n",
              "118   https://www.ikea.com/sa/en/p/kongsfjord-divan-...          Yes   \n",
              "2455  https://www.ikea.com/sa/en/p/landskrona-5-seat...          Yes   \n",
              "\n",
              "                           short_description  \\\n",
              "2344                 Corner sofa-bed, 6-seat   \n",
              "190                  Corner sofa-bed, 6-seat   \n",
              "2559                   U-shaped sofa, 6 seat   \n",
              "118           Divan bed,          180x200 cm   \n",
              "2455                             5-seat sofa   \n",
              "\n",
              "                                      designer  depth  height  width  \n",
              "2344              Henrik Preutz/IKEA of Sweden  164.0   102.0  387.0  \n",
              "190               Henrik Preutz/IKEA of Sweden  164.0   102.0  387.0  \n",
              "2559                         Francis Cayouette  252.0   104.0  327.0  \n",
              "118   Ola Wihlborg/IKEA of Sweden/Synnöve Mork    NaN   135.0  180.0  \n",
              "2455             IKEA of Sweden/Tord Björklund    NaN    78.0  360.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f85dbe8a-3108-49ba-8260-503ebc9a4898\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>item_id</th>\n",
              "      <th>name</th>\n",
              "      <th>category</th>\n",
              "      <th>price</th>\n",
              "      <th>sellable_online</th>\n",
              "      <th>link</th>\n",
              "      <th>other_colors</th>\n",
              "      <th>short_description</th>\n",
              "      <th>designer</th>\n",
              "      <th>depth</th>\n",
              "      <th>height</th>\n",
              "      <th>width</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2344</th>\n",
              "      <td>79277632</td>\n",
              "      <td>LIDHULT</td>\n",
              "      <td>Sofas &amp; armchairs</td>\n",
              "      <td>9585</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/lidhult-corner-so...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Corner sofa-bed, 6-seat</td>\n",
              "      <td>Henrik Preutz/IKEA of Sweden</td>\n",
              "      <td>164.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>387.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>190</th>\n",
              "      <td>29277639</td>\n",
              "      <td>LIDHULT</td>\n",
              "      <td>Beds</td>\n",
              "      <td>9585</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/lidhult-corner-so...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Corner sofa-bed, 6-seat</td>\n",
              "      <td>Henrik Preutz/IKEA of Sweden</td>\n",
              "      <td>164.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>387.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2559</th>\n",
              "      <td>89256610</td>\n",
              "      <td>GRÖNLID</td>\n",
              "      <td>Sofas &amp; armchairs</td>\n",
              "      <td>8900</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/groenlid-u-shaped...</td>\n",
              "      <td>No</td>\n",
              "      <td>U-shaped sofa, 6 seat</td>\n",
              "      <td>Francis Cayouette</td>\n",
              "      <td>252.0</td>\n",
              "      <td>104.0</td>\n",
              "      <td>327.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>118</th>\n",
              "      <td>89186778</td>\n",
              "      <td>KONGSFJORD</td>\n",
              "      <td>Beds</td>\n",
              "      <td>8551</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/kongsfjord-divan-...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Divan bed,          180x200 cm</td>\n",
              "      <td>Ola Wihlborg/IKEA of Sweden/Synnöve Mork</td>\n",
              "      <td>NaN</td>\n",
              "      <td>135.0</td>\n",
              "      <td>180.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2455</th>\n",
              "      <td>49269153</td>\n",
              "      <td>LANDSKRONA</td>\n",
              "      <td>Sofas &amp; armchairs</td>\n",
              "      <td>8495</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/landskrona-5-seat...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>5-seat sofa</td>\n",
              "      <td>IKEA of Sweden/Tord Björklund</td>\n",
              "      <td>NaN</td>\n",
              "      <td>78.0</td>\n",
              "      <td>360.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f85dbe8a-3108-49ba-8260-503ebc9a4898')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f85dbe8a-3108-49ba-8260-503ebc9a4898 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f85dbe8a-3108-49ba-8260-503ebc9a4898');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fad75fb9-4222-4c13-bc65-1e4606778921\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fad75fb9-4222-4c13-bc65-1e4606778921')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fad75fb9-4222-4c13-bc65-1e4606778921 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_cleaned",
              "summary": "{\n  \"name\": \"df_cleaned\",\n  \"rows\": 3694,\n  \"fields\": [\n    {\n      \"column\": \"item_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28887094,\n        \"min\": 58487,\n        \"max\": 99932615,\n        \"num_unique_values\": 2962,\n        \"samples\": [\n          60444301,\n          30409035,\n          50382493\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 607,\n        \"samples\": [\n          \"VESKEN\",\n          \"GAMLARED / STEFAN\",\n          \"M\\u00d6CKELBY\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"category\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 17,\n        \"samples\": [\n          \"Sofas & armchairs\",\n          \"Beds\",\n          \"Cabinets & cupboards\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1374,\n        \"min\": 3,\n        \"max\": 9585,\n        \"num_unique_values\": 964,\n        \"samples\": [\n          440,\n          170,\n          39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sellable_online\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          false,\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"link\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2962,\n        \"samples\": [\n          \"https://www.ikea.com/sa/en/p/lerhamn-table-black-brown-60444301/\",\n          \"https://www.ikea.com/sa/en/p/listerby-console-table-brown-30409035/\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"other_colors\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\",\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"short_description\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1706,\n        \"samples\": [\n          \"        Chest of 4 drawers,          87x76 cm\",\n          \"        TV bench,          90x40x38 cm\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"designer\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 381,\n        \"samples\": [\n          \"S Fager/J Jelinek\",\n          \"Johanna Asshoff/Jomi Evers\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"depth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29.958350722592453,\n        \"min\": 1.0,\n        \"max\": 257.0,\n        \"num_unique_values\": 114,\n        \"samples\": [\n          96.0,\n          98.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 61.09758520961719,\n        \"min\": 1.0,\n        \"max\": 700.0,\n        \"num_unique_values\": 193,\n        \"samples\": [\n          16.0,\n          187.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 71.1337712061205,\n        \"min\": 1.0,\n        \"max\": 420.0,\n        \"num_unique_values\": 263,\n        \"samples\": [\n          60.0,\n          89.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 75
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "At first glance it seems like the values make sense. The outliers seem to be simply the price variation of products if you compare something like a bed or livingroom set to a door knob. I will collect the outliers in a variable to be sure this is the case for most of the values."
      ],
      "metadata": {
        "id": "nJeB3rJgoLio"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Q1 = df_cleaned['price'].quantile(0.25)\n",
        "Q3 = df_cleaned['price'].quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "#I only calculated the highest end of the outliers because it is clear from the box chart that there are no outliers below.\n",
        "outliers_high = df_cleaned[(df_cleaned['price'] > (Q3 + 1.5 * IQR))]\n",
        "outliers_high"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "U21N7myEonP5",
        "outputId": "84e477fb-8618-4258-ca6a-21544dc3fed3"
      },
      "execution_count": 76,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       item_id        name              category  price  sellable_online  \\\n",
              "2344  79277632     LIDHULT     Sofas & armchairs   9585             True   \n",
              "190   29277639     LIDHULT                  Beds   9585             True   \n",
              "2559  89256610     GRÖNLID     Sofas & armchairs   8900             True   \n",
              "118   89186778  KONGSFJORD                  Beds   8551             True   \n",
              "2455  49269153  LANDSKRONA     Sofas & armchairs   8495             True   \n",
              "...        ...         ...                   ...    ...              ...   \n",
              "1025  49194681       BESTÅ  Cabinets & cupboards   3340             True   \n",
              "195   19290014     LIDHULT                  Beds   3340             True   \n",
              "137    9324284      PLATSA                  Beds   3339             True   \n",
              "3381  39192611       BESTÅ  TV & media furniture   3310             True   \n",
              "3082   9288035      BEKANT        Tables & desks   3304             True   \n",
              "\n",
              "                                                   link other_colors  \\\n",
              "2344  https://www.ikea.com/sa/en/p/lidhult-corner-so...          Yes   \n",
              "190   https://www.ikea.com/sa/en/p/lidhult-corner-so...          Yes   \n",
              "2559  https://www.ikea.com/sa/en/p/groenlid-u-shaped...           No   \n",
              "118   https://www.ikea.com/sa/en/p/kongsfjord-divan-...          Yes   \n",
              "2455  https://www.ikea.com/sa/en/p/landskrona-5-seat...          Yes   \n",
              "...                                                 ...          ...   \n",
              "1025  https://www.ikea.com/sa/en/p/besta-tv-storage-...          Yes   \n",
              "195   https://www.ikea.com/sa/en/p/lidhult-2-seat-so...          Yes   \n",
              "137   https://www.ikea.com/sa/en/p/platsa-bed-frame-...           No   \n",
              "3381  https://www.ikea.com/sa/en/p/besta-tv-storage-...          Yes   \n",
              "3082  https://www.ikea.com/sa/en/p/bekant-desk-with-...          Yes   \n",
              "\n",
              "                                      short_description  \\\n",
              "2344                            Corner sofa-bed, 6-seat   \n",
              "190                             Corner sofa-bed, 6-seat   \n",
              "2559                              U-shaped sofa, 6 seat   \n",
              "118                      Divan bed,          180x200 cm   \n",
              "2455                                        5-seat sofa   \n",
              "...                                                 ...   \n",
              "1025          TV storage combination/glass doors,   ...   \n",
              "195                             2-seat sofa-bed section   \n",
              "137           Bed frame with 6 doors+12 drawers,    ...   \n",
              "3381          TV storage combination/glass doors,   ...   \n",
              "3082          Desk with screen,          160x160 120 cm   \n",
              "\n",
              "                                      designer  depth  height  width  \n",
              "2344              Henrik Preutz/IKEA of Sweden  164.0   102.0  387.0  \n",
              "190               Henrik Preutz/IKEA of Sweden  164.0   102.0  387.0  \n",
              "2559                         Francis Cayouette  252.0   104.0  327.0  \n",
              "118   Ola Wihlborg/IKEA of Sweden/Synnöve Mork    NaN   135.0  180.0  \n",
              "2455             IKEA of Sweden/Tord Björklund    NaN    78.0  360.0  \n",
              "...                                        ...    ...     ...    ...  \n",
              "1025             Marcus Arvonen/IKEA of Sweden   40.0   230.0  300.0  \n",
              "195               IKEA of Sweden/Henrik Preutz   97.0    95.0  160.0  \n",
              "137                Ola Wihlborg/IKEA of Sweden   40.0    43.0  140.0  \n",
              "3381                            IKEA of Sweden   40.0   230.0  240.0  \n",
              "3082             K Malmvall/E Lilja Löwenhielm  160.0     NaN    NaN  \n",
              "\n",
              "[276 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f50ae87f-bbe6-4368-8660-6adae3d022bd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>item_id</th>\n",
              "      <th>name</th>\n",
              "      <th>category</th>\n",
              "      <th>price</th>\n",
              "      <th>sellable_online</th>\n",
              "      <th>link</th>\n",
              "      <th>other_colors</th>\n",
              "      <th>short_description</th>\n",
              "      <th>designer</th>\n",
              "      <th>depth</th>\n",
              "      <th>height</th>\n",
              "      <th>width</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2344</th>\n",
              "      <td>79277632</td>\n",
              "      <td>LIDHULT</td>\n",
              "      <td>Sofas &amp; armchairs</td>\n",
              "      <td>9585</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/lidhult-corner-so...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Corner sofa-bed, 6-seat</td>\n",
              "      <td>Henrik Preutz/IKEA of Sweden</td>\n",
              "      <td>164.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>387.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>190</th>\n",
              "      <td>29277639</td>\n",
              "      <td>LIDHULT</td>\n",
              "      <td>Beds</td>\n",
              "      <td>9585</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/lidhult-corner-so...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Corner sofa-bed, 6-seat</td>\n",
              "      <td>Henrik Preutz/IKEA of Sweden</td>\n",
              "      <td>164.0</td>\n",
              "      <td>102.0</td>\n",
              "      <td>387.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2559</th>\n",
              "      <td>89256610</td>\n",
              "      <td>GRÖNLID</td>\n",
              "      <td>Sofas &amp; armchairs</td>\n",
              "      <td>8900</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/groenlid-u-shaped...</td>\n",
              "      <td>No</td>\n",
              "      <td>U-shaped sofa, 6 seat</td>\n",
              "      <td>Francis Cayouette</td>\n",
              "      <td>252.0</td>\n",
              "      <td>104.0</td>\n",
              "      <td>327.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>118</th>\n",
              "      <td>89186778</td>\n",
              "      <td>KONGSFJORD</td>\n",
              "      <td>Beds</td>\n",
              "      <td>8551</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/kongsfjord-divan-...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Divan bed,          180x200 cm</td>\n",
              "      <td>Ola Wihlborg/IKEA of Sweden/Synnöve Mork</td>\n",
              "      <td>NaN</td>\n",
              "      <td>135.0</td>\n",
              "      <td>180.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2455</th>\n",
              "      <td>49269153</td>\n",
              "      <td>LANDSKRONA</td>\n",
              "      <td>Sofas &amp; armchairs</td>\n",
              "      <td>8495</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/landskrona-5-seat...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>5-seat sofa</td>\n",
              "      <td>IKEA of Sweden/Tord Björklund</td>\n",
              "      <td>NaN</td>\n",
              "      <td>78.0</td>\n",
              "      <td>360.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1025</th>\n",
              "      <td>49194681</td>\n",
              "      <td>BESTÅ</td>\n",
              "      <td>Cabinets &amp; cupboards</td>\n",
              "      <td>3340</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/besta-tv-storage-...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>TV storage combination/glass doors,   ...</td>\n",
              "      <td>Marcus Arvonen/IKEA of Sweden</td>\n",
              "      <td>40.0</td>\n",
              "      <td>230.0</td>\n",
              "      <td>300.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>195</th>\n",
              "      <td>19290014</td>\n",
              "      <td>LIDHULT</td>\n",
              "      <td>Beds</td>\n",
              "      <td>3340</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/lidhult-2-seat-so...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>2-seat sofa-bed section</td>\n",
              "      <td>IKEA of Sweden/Henrik Preutz</td>\n",
              "      <td>97.0</td>\n",
              "      <td>95.0</td>\n",
              "      <td>160.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>137</th>\n",
              "      <td>9324284</td>\n",
              "      <td>PLATSA</td>\n",
              "      <td>Beds</td>\n",
              "      <td>3339</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/platsa-bed-frame-...</td>\n",
              "      <td>No</td>\n",
              "      <td>Bed frame with 6 doors+12 drawers,    ...</td>\n",
              "      <td>Ola Wihlborg/IKEA of Sweden</td>\n",
              "      <td>40.0</td>\n",
              "      <td>43.0</td>\n",
              "      <td>140.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3381</th>\n",
              "      <td>39192611</td>\n",
              "      <td>BESTÅ</td>\n",
              "      <td>TV &amp; media furniture</td>\n",
              "      <td>3310</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/besta-tv-storage-...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>TV storage combination/glass doors,   ...</td>\n",
              "      <td>IKEA of Sweden</td>\n",
              "      <td>40.0</td>\n",
              "      <td>230.0</td>\n",
              "      <td>240.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3082</th>\n",
              "      <td>9288035</td>\n",
              "      <td>BEKANT</td>\n",
              "      <td>Tables &amp; desks</td>\n",
              "      <td>3304</td>\n",
              "      <td>True</td>\n",
              "      <td>https://www.ikea.com/sa/en/p/bekant-desk-with-...</td>\n",
              "      <td>Yes</td>\n",
              "      <td>Desk with screen,          160x160 120 cm</td>\n",
              "      <td>K Malmvall/E Lilja Löwenhielm</td>\n",
              "      <td>160.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>276 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f50ae87f-bbe6-4368-8660-6adae3d022bd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f50ae87f-bbe6-4368-8660-6adae3d022bd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f50ae87f-bbe6-4368-8660-6adae3d022bd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1f7c221b-f268-420d-8594-bd2b3afe6872\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1f7c221b-f268-420d-8594-bd2b3afe6872')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1f7c221b-f268-420d-8594-bd2b3afe6872 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_f2f6ce73-8421-44ce-b34c-c165e1e72cd7\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('outliers_high')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f2f6ce73-8421-44ce-b34c-c165e1e72cd7 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('outliers_high');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "outliers_high",
              "summary": "{\n  \"name\": \"outliers_high\",\n  \"rows\": 276,\n  \"fields\": [\n    {\n      \"column\": \"item_id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28619337,\n        \"min\": 198591,\n        \"max\": 99302895,\n        \"num_unique_values\": 231,\n        \"samples\": [\n          39277894,\n          69229217,\n          99257280\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 47,\n        \"samples\": [\n          \"V\\u00c4STANBY/V\\u00c4STAN\\u00c5 / BERNHARD\",\n          \"PAX / HOKKSUND\",\n          \"LIATORP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"category\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"Bookcases & shelving units\",\n          \"Beds\",\n          \"Cabinets & cupboards\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1351,\n        \"min\": 3304,\n        \"max\": 9585,\n        \"num_unique_values\": 181,\n        \"samples\": [\n          6805,\n          6000,\n          3635\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sellable_online\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"link\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 231,\n        \"samples\": [\n          \"https://www.ikea.com/sa/en/p/vallentuna-3-seat-modular-sofa-with-open-end-and-storage-orrsta-olive-green-s39277894/\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"other_colors\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"short_description\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 92,\n        \"samples\": [\n          \"        4-seat conversation set, outdoor\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"designer\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 68,\n        \"samples\": [\n          \"IKEA of Sweden/Marcus Arvonen\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"depth\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.690069620862324,\n        \"min\": 37.0,\n        \"max\": 257.0,\n        \"num_unique_values\": 37,\n        \"samples\": [\n          95.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62.68259071246507,\n        \"min\": 43.0,\n        \"max\": 281.0,\n        \"num_unique_values\": 29,\n        \"samples\": [\n          281.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"width\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 87.60342421818468,\n        \"min\": 78.0,\n        \"max\": 387.0,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          310.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 76
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "categories_outliers = outliers_high.groupby('category').size()\n",
        "print(categories_outliers.sort_values(ascending=False))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-nNgt2Y40_cN",
        "outputId": "c73f9ea3-5419-446a-a44c-04f7c6c80f94"
      },
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "category\n",
            "Sofas & armchairs             96\n",
            "Tables & desks                45\n",
            "Wardrobes                     42\n",
            "Chairs                        35\n",
            "Beds                          27\n",
            "Outdoor furniture             12\n",
            "Cabinets & cupboards           8\n",
            "TV & media furniture           7\n",
            "Bookcases & shelving units     4\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "It seems like my assumption was correct. Even though this means my data is heavily right skewed, I don't see a need to remove the outliers. We can verify illustrate this further by plotting it on a histogram."
      ],
      "metadata": {
        "id": "ZKOUUQElo7s1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,6))\n",
        "sns.histplot(df_cleaned['price'])\n",
        "plt.title('Ikea Product Prices 2022')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "LJ_CmLB-pMwJ",
        "outputId": "c128f8ba-04e4-42d3-f1fc-b731c5afa828"
      },
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "From this lineplot, it is clear that the majority of products cost under 2,000 RS. We have a column that shows if the product is sold exclusively in store or also online. We can check if there is any correlation between the price and sellable_online columns by using a line plot to clearly see the two categories."
      ],
      "metadata": {
        "id": "PvIDyJG4t09p"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Before plotting this information on a chart, I want to see the distribution of the column."
      ],
      "metadata": {
        "id": "If5r0lo4udD6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sellable_categories = df_cleaned.groupby('sellable_online').size()\n",
        "print(sellable_categories)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d1b8WvVivXBJ",
        "outputId": "0bda5737-a0b9-4cc5-c9fb-c685782c77c9"
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "sellable_online\n",
            "False      28\n",
            "True     3666\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "This information changes my next steps. I will not be plotting this information on a graph because it's clear that there will be a correlation but not because of intentional behavior like IKEA changing their available location of products depending on their price, but because most of the products are available online.\n",
        "\n",
        "The fact that only 0.8% of products are exclusively sold in store tells me that this correlation is not depending on the price, but simply follows the same behavior because the majority of the products are found both online and in store.\n",
        "\n",
        "Another correlation that we can check is between the product category and price."
      ],
      "metadata": {
        "id": "xV8yR_L6vl22"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "pivot_table = pd.pivot_table(df_cleaned, values='price', index='category', aggfunc='mean')\n",
        "pivot_table.sort_values(by='price', ascending=False)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 614
        },
        "id": "yQENBkp_10_O",
        "outputId": "6eb8dbbf-21ac-431c-f509-1a1d1a0aeb11"
      },
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                            price\n",
              "category                                         \n",
              "Wardrobes                             2162.131356\n",
              "Sofas & armchairs                     2004.014019\n",
              "Beds                                  1647.427885\n",
              "Tables & desks                        1129.393791\n",
              "Sideboards, buffets & console tables  1068.086957\n",
              "Chairs                                1048.931393\n",
              "Room dividers                          932.000000\n",
              "Outdoor furniture                      859.805556\n",
              "Cabinets & cupboards                   789.006849\n",
              "Bar furniture                          679.553191\n",
              "Trolleys                               678.500000\n",
              "TV & media furniture                   659.031579\n",
              "Chests of drawers & drawer units       612.176000\n",
              "Café furniture                         553.884615\n",
              "Bookcases & shelving units             519.403285\n",
              "Nursery furniture                      393.659794\n",
              "Children's furniture                   272.758065"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1b7a6c8a-753d-4817-aa36-29353d731751\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>price</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>category</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Wardrobes</th>\n",
              "      <td>2162.131356</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sofas &amp; armchairs</th>\n",
              "      <td>2004.014019</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Beds</th>\n",
              "      <td>1647.427885</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Tables &amp; desks</th>\n",
              "      <td>1129.393791</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sideboards, buffets &amp; console tables</th>\n",
              "      <td>1068.086957</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Chairs</th>\n",
              "      <td>1048.931393</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Room dividers</th>\n",
              "      <td>932.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Outdoor furniture</th>\n",
              "      <td>859.805556</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cabinets &amp; cupboards</th>\n",
              "      <td>789.006849</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Bar furniture</th>\n",
              "      <td>679.553191</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Trolleys</th>\n",
              "      <td>678.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>TV &amp; media furniture</th>\n",
              "      <td>659.031579</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Chests of drawers &amp; drawer units</th>\n",
              "      <td>612.176000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Café furniture</th>\n",
              "      <td>553.884615</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Bookcases &amp; shelving units</th>\n",
              "      <td>519.403285</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Nursery furniture</th>\n",
              "      <td>393.659794</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Children's furniture</th>\n",
              "      <td>272.758065</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1b7a6c8a-753d-4817-aa36-29353d731751')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1b7a6c8a-753d-4817-aa36-29353d731751 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1b7a6c8a-753d-4817-aa36-29353d731751');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7c9050b0-e53a-4b34-9f21-07a4477a53c4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7c9050b0-e53a-4b34-9f21-07a4477a53c4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7c9050b0-e53a-4b34-9f21-07a4477a53c4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"pivot_table\",\n  \"rows\": 17,\n  \"fields\": [\n    {\n      \"column\": \"category\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 17,\n        \"samples\": [\n          \"Wardrobes\",\n          \"Sofas & armchairs\",\n          \"Chairs\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"price\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 536.8823261941296,\n        \"min\": 272.758064516129,\n        \"max\": 2162.1313559322034,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          2162.1313559322034,\n          2004.0140186915887,\n          1048.931392931393\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 89
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,6))\n",
        "sns.scatterplot(data=df_cleaned, x='category', y='price')\n",
        "plt.xticks(rotation=90)\n",
        "plt.title('Category vs Price')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 822
        },
        "id": "EsmfzSK42erI",
        "outputId": "11810799-c4e6-4f8e-8582-eca4fa510388"
      },
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Category vs Price')"
            ]
          },
          "metadata": {},
          "execution_count": 107
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Its clear from this scatterplot that there is some form of linear relationship between price and category. It also shows that between categories there is price variation. In the example of sofas & armchairs there is a lot of gradual variation shown by how close together the data points are. This category has two data points that are further away from the rest once you get closer to the max price. But to see if there is in fact a relationship we can plot the two variables on another chart. This time I will take the average price per category to see if its correlated with the amount of products per category. This will give me an idea if the relationship is simply due to how many products there are listed like in the case of sellable_online column."
      ],
      "metadata": {
        "id": "7i3TV3JZ4zVB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Group by category\n",
        "table_categories = df_cleaned.groupby('category').size()\n",
        "#average price per category\n",
        "av_price = df_cleaned.groupby('category')['price'].mean()\n",
        "\n",
        "#bar plot\n",
        "plt.figure(figsize=(10,6))\n",
        "sns.barplot(x=table_categories.index, y=table_categories.values)\n",
        "\n",
        "#line to see average price per category\n",
        "plt.plot(av_price.index, av_price.values, marker='o')\n",
        "plt.xlabel('Category')\n",
        "plt.ylabel('Average Price')\n",
        "plt.title('Average Price per Category')\n",
        "plt.xticks(rotation=90)\n",
        "plt.title('Category Distribution')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 822
        },
        "id": "6vp1zJVs5S9m",
        "outputId": "99f284f7-6fa5-4b82-f61d-045c601c862e"
      },
      "execution_count": 117,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Category Distribution')"
            ]
          },
          "metadata": {},
          "execution_count": 117
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "In this graph its shown that the price relationship is not necessarily due to the amount of products per category. This can be seen because althrough bookcases & shelving units have more enteries in the dataset than cabinets, the average price is higher for the cabinets than the bookcases. It seems that the average price depends on the product, rather than choices from the dataset such as how many items per categories to include."
      ],
      "metadata": {
        "id": "Yx-qNIvj8Bwd"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Conclusion & Reflection\n",
        "\n",
        "In conclusion, while statistical analysis of datasets can be proven useful for various datasets, I think that with the dataset that I chose and the decisions that I took, it provided limited insights.\n",
        "\n",
        "Insights that I was able to find were the following:\n",
        "\n",
        "1. The dataset has multiple outliers above the 3rd quartile, but unlike in the weekly assignments, I decided not to remove those outliers. This was because the values made sense and it wasn't likely that they were mistakes. This simply meant that I had a long tail in my right skewed data.\n",
        "2. IKEA lists the majority of their products online. Very few products are only available in store. It would be interesting the see if I could find a similar dataset from previous years to see when this trend started. This type of analysis would provide a useful insight into company behavior. This could be plotted against webshop sales to see if there is a correlation between the increase of online sales and the listing of items online.\n",
        "3. Each category has a variation of prices, with the majority of prices falling to the left of 2000 RS. From historical exchange rates, that would be roughly 22 Euros in 2022. [Currency converter I used](https://wise.com/gb/currency-converter/inr-to-eur-rate?amount=20000)\n",
        "\n",
        "If I were to analyze this dataset again I would do some more data cleaning. For example, I could have taken the time to either drop the dimension columns or find a way to fill them by looking at averages for their categories. Another option would be to only include individual products and not sets. When I saw another notebook from a data analyst, they use the empty values from the old price column to represent that those products were new. After reading about this it makes a lot of sense to plot this information on a graph to illustrate the amount of new products being launched. In the end, I am happy with my analysis, I think it shows a clear sequential process and the documentation is complete enough that someone with limited data analytics skills can read and understand the process and dataset. I did not spend a lot of time in data orgins to understand other assumptions made from this dataset because it was difficult to find from where the data was collected and how. I think for my next assignment I want to make sure I select a dataset that has clear origins so I can apply more concepts from the Critical Thinking and Data Studies course in Data Science assignments."
      ],
      "metadata": {
        "id": "aNP-nyXp8iQI"
      }
    }
  ]
}
